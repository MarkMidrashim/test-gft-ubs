package br.com.lacd.controllers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import br.com.lacd.model.File;
import br.com.lacd.model.Product;
import br.com.lacd.model.repositories.ProductRepository;
import br.com.lacd.services.FileProcessorService;
import br.com.lacd.services.FileStorageService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@Api(value="ProductController", tags= {"ProductController"})
@RestController
@RequestMapping("/api/v1/product/")
public class ProductController {
	
	private static Logger logger = LoggerFactory.getLogger(ProductController.class);

	/* DI */
	
	@Autowired
	private ProductRepository repository;
	
	@Autowired
	private FileStorageService fileStorageService;
	
	/* ACTIONS */
	
	@ApiOperation(value="Find product by id")
	@GetMapping(value="/{id}", produces = {"application/json", "application/xml"})
	public ResponseEntity<Product> findById(@PathVariable Long id) {
		// logger.info("PORT = " + env.getProperty("local.server.port"));
		Product worker = repository.findById(id).get();
		return ResponseEntity.ok(worker);
	}
	
	@ApiOperation(value="Upload multiple files")
	@PostMapping(value="/uploadFiles")
	public ResponseEntity<?> uploadMultipleFiles(@RequestParam("files") MultipartFile[] files) {
		/*try {
			int windowProcess = 4; //4 CPU's
			
			ScheduledExecutorService executor = Executors.newScheduledThreadPool(windowProcess);

			for (MultipartFile file : files) {
				File fileConverted = fileStorageService.registryFile(file);
				executor.execute(new FileProcessorService(fileConverted));
			}
		
			executor.awaitTermination(0 , TimeUnit.SECONDS);*/
			
			for (MultipartFile file : files) {
				File fileConverted = fileStorageService.registryFile(file);
				new FileProcessorService(fileConverted);
				break;
			}

			return ResponseEntity.ok("");
		/*} catch (InterruptedException e) {
			e.printStackTrace();
			return ResponseEntity.noContent().build();
		}*/
	}
}
