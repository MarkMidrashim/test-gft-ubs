package br.com.lacd.services;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import br.com.lacd.model.Product;
import br.com.lacd.model.repositories.ProductRepository;

@Service
public class FileProcessorService {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(FileProcessorService.class);
	
	@Autowired
	private ProductRepository repository;
	
	@Async
    public CompletableFuture<List<Product>> saveCars(final MultipartFile file) throws Exception {
		final long start = System.currentTimeMillis();
		
		List<Product> cars = parseCSVFile(file);
		
		LOGGER.info("Saving a list of cars of size {} records", cars.size());
		
		cars = repository.saveAll(cars);
		
		LOGGER.info("Elapsed time: {}", (System.currentTimeMillis() - start));
		return CompletableFuture.completedFuture(cars);
    }

    private List<Product> parseCSVFile(final MultipartFile file) throws Exception {
		final List<Product> cars=new ArrayList<>();
		try {
		    try (final BufferedReader br = new BufferedReader(new InputStreamReader(file.getInputStream()))) {
		        String line;
		        while ((line=br.readLine()) != null) {
		            final String[] data = line.split(";");
		            final Product car=new Product();
		            /*car.setManufacturer(data[0]);
		            car.setModel(data[1]);
		            car.setType(data[2]);*/
		            cars.add(car);
		        }
		        return cars;
		    }
		} catch(final IOException e) {
		    LOGGER.error("Failed to parse CSV file {}", e);
		    throw new Exception("Failed to parse CSV file {}", e);
		}
    }

    @Async
    public CompletableFuture<List<Product>> getAllCars() {
        LOGGER.info("Request to get a list of cars");

        final List<Product> cars = repository.findAll();
        return CompletableFuture.completedFuture(cars);
    }
}
